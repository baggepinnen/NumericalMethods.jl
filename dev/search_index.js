var documenterSearchIndex = {"docs":
[{"location":"integrals/#Integrales","page":"Integrals","title":"Integrales","text":"","category":"section"},{"location":"integrals/#trapeze-method","page":"Integrals","title":"trapeze method","text":"","category":"section"},{"location":"integrals/","page":"Integrals","title":"Integrals","text":"trapeze(f::Function,a::Number,b::Number,n::Int64=1)","category":"page"},{"location":"integrals/#NumericalMethods.trapeze","page":"Integrals","title":"NumericalMethods.trapeze","text":"trapeze(f::Function,a::Number,b::Number,n::Int64=1)::Float64\n\nComputes the integral of f applying the composite trapeze method.\n\nExample\n\njulia> using NumericalMethods\n\njulia> f(x)=sin(x)\nf (generic function with 1 method)\n\njulia> a=0\n0\n\njulia> b=pi/2\n1.5707963267948966\n\njulia> n=4\n4\n\njulia> trapeze(f,a,b,n)\n0.9871158009727754\n\n\n\n\n\n","category":"function"},{"location":"integrals/#Simpson-method","page":"Integrals","title":"Simpson method","text":"","category":"section"},{"location":"integrals/","page":"Integrals","title":"Integrals","text":"simpson(f::Function,a::Number,b::Number,n::Int64=2)","category":"page"},{"location":"integrals/#NumericalMethods.simpson","page":"Integrals","title":"NumericalMethods.simpson","text":"simpson(f::Function,a::Number,b::Number,n::Int64=2)::Float64\n\nComputes the integral of f applying the composite Simpson method.\n\nExample\n\njulia> using NumericalMethods\n\njulia> f(x)=sin(x)\nf (generic function with 1 method)\n\njulia> a=0\n0\n\njulia> b=pi/2\n1.5707963267948966\n\njulia> n=4\n4\n\njulia> simpson(f,a,b,n)\n1.0001345849741938\n\n\n\n\n\n","category":"function"},{"location":"integrals/#Romberg-method","page":"Integrals","title":"Romberg method","text":"","category":"section"},{"location":"integrals/","page":"Integrals","title":"Integrals","text":"romberg(f::Function,a::Number,b::Number,n::Int64=4)","category":"page"},{"location":"integrals/#NumericalMethods.romberg","page":"Integrals","title":"NumericalMethods.romberg","text":"romberg(f::Function,a::Number,b::Number,n::Int64=4)::Float64\n\nComputes the integral of f applying the Romberg method.\n\nExample\n\njulia> using NumericalMethods\n\njulia> f(x)=sin(x)\nf (generic function with 1 method)\n\njulia> a=0\n0\n\njulia> b=pi/2\n1.5707963267948966\n\njulia> n=4\n4\n\njulia> romberg(f,a,b,n)\n1.0000000081440203\n\n\n\n\n\n","category":"function"},{"location":"integrals/#Newton-Cotes-methods","page":"Integrals","title":"Newton-Cotes methods","text":"","category":"section"},{"location":"integrals/","page":"Integrals","title":"Integrals","text":"newton_cotes(f::Function,a::Number,b::Number,n::Int64,closed::Bool=true)","category":"page"},{"location":"integrals/#NumericalMethods.newton_cotes","page":"Integrals","title":"NumericalMethods.newton_cotes","text":"newton_cotes(f::Function,a::Number,b::Number,n::Int64,closed::Bool=true)::Float64\n\nComputes the integral of f applying the Newton-Cotes methods. If closed=true 1≤n≤4, else 0≤n≤3.\n\nExample\n\njulia> using NumericalMethods\n\njulia> f(x)=sin(x)\nf (generic function with 1 method)\n\njulia> a=0\n0\n\njulia> b=pi/2\n1.5707963267948966\n\njulia> newton_cotes(f,a,b,1)\n0.7853981633974483\n\njulia> newton_cotes(f,a,b,2)\n1.0022798774922104\n\njulia> newton_cotes(f,a,b,3)\n1.001004923314279\n\njulia> newton_cotes(f,a,b,4)\n0.9999915654729927\n\njulia> newton_cotes(f,a,b,0,false)\n1.1107207345395915\n\njulia> newton_cotes(f,a,b,1,false)\n1.0728738432865557\n\njulia> newton_cotes(f,a,b,2,false)\n0.9979892924561773\n\njulia> newton_cotes(f,a,b,3,false)\n0.9986082958707345\n\n\n\n\n\n","category":"function"},{"location":"integrals/#trapeze2d-method","page":"Integrals","title":"trapeze2d method","text":"","category":"section"},{"location":"integrals/","page":"Integrals","title":"Integrals","text":"trapeze2d(F::Function,a::Number,b::Number,c::Number,d::Number,n::Int,m::Int)\ntrapeze2d(F::Function,a::Number,b::Number,c::Function,d::Function,n::Int,m::Int)","category":"page"},{"location":"integrals/#NumericalMethods.trapeze2d-Tuple{Function, Number, Number, Number, Number, Int64, Int64}","page":"Integrals","title":"NumericalMethods.trapeze2d","text":"trapeze2d(F::Function,\n          a::Number,\n          b::Number,\n          c::Number,\n          d::Number,\n          n::Int,\n          m::Int)::Float64\n\nComputes the integral of F  in a rectangular region the plain XY,  applying the composite trapeze method.\n\nArguments\n\nF(x,y)::Function: F(x,y) in the function to integrate.\na::Number: The lower limit of the region in x.\nb::Number: The upper limit of the region in x.\nc::Number: The lower limit of the region in y.\nd::Number: The upper limit of the region in y.\nn::Number: The number of subintervals beetwen a and b.\nm::Number: The number of subintervals beetwen c and d.\n\nExample\n\njulia> using NumericalMethods\n\njulia> F(x,y)=x^2 + sin(y)\nF (generic function with 1 method)\n\njulia> trapeze2d(F,0,1,0,1,2,2)\n0.8250805155040757\n\njulia> trapeze2d(F,0,1,0,1,4,2)\n0.7938305155040756\n\njulia> trapeze2d(F,0,1,0,1,2,4)\n0.8323009375715021\n\njulia> trapeze2d(F,0,1,0,1,4,4)\n0.8010509375715024\n\n\n\n\n\n","category":"method"},{"location":"integrals/#NumericalMethods.trapeze2d-Tuple{Function, Number, Number, Function, Function, Int64, Int64}","page":"Integrals","title":"NumericalMethods.trapeze2d","text":"trapeze2d(F::Function,\n          a::Number,\n          b::Number,\n          c::Function,\n          d::Function,\n          n::Int,\n          m::Int)::Float64\n\nComputes the integral of F  in a not rectangular region the plain XY,  applying the composite trapeze method.\n\nArguments\n\nF(x,y)::Function: F(x,y) in the function to integrate.\na::Number: The lower limit of the region in x.\nb::Number: The upper limit of the region in x.\nc(x)::Function: The lower limit of the region in y.\nd(x)::Function: The upper limit of the region in y.\nn::Number: The number of subintervals beetwen a and b.\nm::Number: The number of subintervals beetwen c(x) and d(x).\n\nExample\n\njulia> using NumericalMethods\n\njulia> F(x,y)=x^2 + sin(y)\nF (generic function with 1 method)\n\njulia> c(x)=x\nc (generic function with 1 method)\n\njulia> d(x)=2*x\nd (generic function with 1 method)\n\njulia> trapeze2d(F,0,1,c,d,2,2)\n0.7143707767687785\n\njulia> trapeze2d(F,0,1,c,d,4,2)\n0.6526600971423198\n\njulia> trapeze2d(F,0,1,c,d,2,4)\n0.7187860972222649\n\njulia> trapeze2d(F,0,1,c,d,4,4)\n0.6563466180940812\n\n\n\n\n\n","category":"method"},{"location":"integrals/#Simpson2d-method","page":"Integrals","title":"Simpson2d method","text":"","category":"section"},{"location":"integrals/","page":"Integrals","title":"Integrals","text":"simpson2d(F::Function,a::Number,b::Number,c::Number,d::Number,n::Int,m::Int)\nsimpson2d(F::Function,a::Number,b::Number,c::Function,d::Function,n::Int,m::Int)\n","category":"page"},{"location":"integrals/#NumericalMethods.simpson2d-Tuple{Function, Number, Number, Number, Number, Int64, Int64}","page":"Integrals","title":"NumericalMethods.simpson2d","text":"simpson2d(F::Function,\n          a::Number,\n          b::Number,\n          c::Number,\n          d::Number,\n          n::Int,\n          m::Int)::Float64\n\nComputes the integral of F  in a rectangular region the plain XY,  applying the composite Simpson method.\n\nArguments\n\nF(x,y)::Function: F(x,y) in the function to integrate.\na::Number: The lower limit of the region in x.\nb::Number: The upper limit of the region in x.\nc::Number: The lower limit of the region in y.\nd::Number: The upper limit of the region in y.\nn::Number: The number of subintervals beetwen a and b.\nm::Number: The number of subintervals beetwen c and d.\n\nExample\n\njulia> using NumericalMethods\n\njulia> F(x,y)=x^2 + sin(y)\nF (generic function with 1 method)\n\njulia> simpson2d(F,0,1,0,1,2,2)\n0.793195523204118\n\njulia> simpson2d(F,0,1,0,1,2,4)\n0.7930410782606442\n\njulia> simpson2d(F,0,1,0,1,4,2)\n0.793195523204118\n\njulia> simpson2d(F,0,1,0,1,4,4)\n0.7930410782606443\n\njulia> simpson2d(F,0,1,0,1,100,100)\n0.7930310274907315\n\n\n\n\n\n","category":"method"},{"location":"integrals/#NumericalMethods.simpson2d-Tuple{Function, Number, Number, Function, Function, Int64, Int64}","page":"Integrals","title":"NumericalMethods.simpson2d","text":"simpson2d(F::Function,\n          a::Number,\n          b::Number,\n          c::Function,\n          d::Function,\n          n::Int,\n          m::Int)::Float64\n\nComputes the integral of F  in a not rectangular region the plain XY,  applying the composite Simpson method.\n\nArguments\n\nF(x,y)::Function: F(x,y) in the function to integrate.\na::Number: The lower limit of the region in x.\nb::Number: The upper limit of the region in x.\nc(x)::Function: The lower limit of the region in y.\nd(x)::Function: The upper limit of the region in y.\nn::Number: The number of subintervals beetwen a and b.\nm::Number: The number of subintervals beetwen c(x) and d(x).\n\nExample\n\njulia> using NumericalMethods\n\njulia> F(x,y)=x^2 + sin(y)\nF (generic function with 1 method)\n\njulia> c(x)=x\nc (generic function with 1 method)\n\njulia> d(x)=2*x\nd (generic function with 1 method)\n\njulia> simpson2d(F,0,1,c,d,2,2)\n0.6343236523627963\n\njulia> simpson2d(F,0,1,c,d,4,2)\n0.6367323875670757\n\njulia> simpson2d(F,0,1,c,d,2,4)\n0.6342654852512393\n\njulia> simpson2d(F,0,1,c,d,4,4)\n0.6366813209795263\n\n\n\n\n\n","category":"method"},{"location":"interpolations/#Interpolations","page":"Interpolations","title":"Interpolations","text":"","category":"section"},{"location":"interpolations/#Lagrange-method","page":"Interpolations","title":"Lagrange method","text":"","category":"section"},{"location":"interpolations/","page":"Interpolations","title":"Interpolations","text":"lagrange(x,y)","category":"page"},{"location":"interpolations/#NumericalMethods.lagrange-Tuple{Any, Any}","page":"Interpolations","title":"NumericalMethods.lagrange","text":"lagrange(x,y)::Function\n\nComputes the Lagrange interpolation polynomial\n\nArguments\n\nx::Vector{Number}: The xᵢ values for i=1,2...n \ny::Vector{Number}: The f(xᵢ) values for i=1,2...n \n\nReturn\n\np::Function: The Lagrange interpolation polynomial\n\nExample\n\nusing NumericalMethods\n\nx=0:0.5:3\ny=exp.(x)\np=newton(x,y)\np(2.5)\n\n# output\n\n12.182493960703471\n\n\n\n\n\n","category":"method"},{"location":"interpolations/#Newton-method","page":"Interpolations","title":"Newton method","text":"","category":"section"},{"location":"interpolations/","page":"Interpolations","title":"Interpolations","text":"newton(x,y)","category":"page"},{"location":"interpolations/#NumericalMethods.newton-Tuple{Any, Any}","page":"Interpolations","title":"NumericalMethods.newton","text":"newton(x,y)::Function\n\nComputes the Newton interpolation polynomial\n\nArguments\n\nx::Vector{Number}: The xᵢ values for i=1,2...n \ny::Vector{Number}: The f(xᵢ) values for i=1,2...n \n\nReturn\n\np::Function: The Newton interpolation polynomial\n\nExample\n\nusing NumericalMethods\n\nx=0:0.5:3\ny=exp.(x)\np=newton(x,y)\np(2.5)\n\n# output\n\n12.182493960703471\n\n\n\n\n\n","category":"method"},{"location":"differential-equations/#Differential-Equations","page":"Differential Equations","title":"Differential Equations","text":"","category":"section"},{"location":"differential-equations/#Euler-Method","page":"Differential Equations","title":"Euler Method","text":"","category":"section"},{"location":"differential-equations/","page":"Differential Equations","title":"Differential Equations","text":"euler(F::Function,t₀::Number,y₀::Number,tₙ::Number,nh::Number,return_values::Bool=false)","category":"page"},{"location":"differential-equations/#NumericalMethods.euler","page":"Differential Equations","title":"NumericalMethods.euler","text":"euler(F::Function,\n      t₀::Number,\n      y₀::Number,\n      tₙ::Number,\n      nh::Number,\n      return_values::Bool=false)\n\nComputes the Euler aproximation for y(t) in tₙ.\n\nArguments\n\nF(t,y)::Function: The y'(t).\nt₀::Number: The initial point. \ntₙ::Number: The final point. \nnh::Number: If 1≤nh, nh is the number of subintervals beetwen t₀ and tₙ,\n\nelse nh is the length of the subintervals beetwen t₀ and tₙ.\n\nreturn_values::Bool: If is true return tvalues=[t₀,t₁...,tₙ],  yvalues=[y₀,y₁...,yₙ], else return yₙ.\n\nExample\n\njulia> using NumericalMethods\n\njulia> F(t,y)=t-y\nF (generic function with 1 method)\n\njulia> euler(F,0,2,1,5)\n0.9830400000000001\n\njulia> euler(F,0,2,1,5,true)\n(Any[0, 0.2, 0.4, 0.6000000000000001, 0.8, 1.0], Any[2, 1.6, 1.32, 1.1360000000000001, 1.0288000000000002, 0.9830400000000001])\n\njulia> euler(F,0,2,1,0.2,true)\n(Any[0, 0.2, 0.4, 0.6000000000000001, 0.8, 1.0], Any[2, 1.6, 1.32, 1.1360000000000001, 1.0288000000000002, 0.9830400000000001])\n\n\n\n\n\n","category":"function"},{"location":"#NumericalMethods.jl","page":"Home","title":"NumericalMethods.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Interpolate, derive, integrate and solve differential equations, using the main methods of numerical analysis, with the Julia power.","category":"page"},{"location":"#Author","page":"Home","title":"Author","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Mitchell Mirano Caro, Faculty of Mathematics, National University of San Marcos(UNMSM).","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The NumericalMethods.jl package is licensed under the MIT  License.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"https://github.com/Mitchell-Mirano/NumericalMethods.jl.git\")","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#Interpolations","page":"Home","title":"Interpolations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"x=0:0.5:3\ny=x .|> x->exp(x)\np=lagrange(x,y) #computes p(x), the Lagrange polynomial interpolation.\np(2.1) # use p(x) in a point.","category":"page"},{"location":"","page":"Home","title":"Home","text":"x=0:0.5:3\ny=x .|> x->exp(x)\np=newton(x,y) #computes p(x), the Newton polynomial interpolation.\np(2.1) # use p(x) in a point.","category":"page"},{"location":"#Integrations","page":"Home","title":"Integrations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Use Simpson's composite method to compute the integral of f(x), when x is between a and b, for example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"int_0^pi2sin(x)dx","category":"page"},{"location":"","page":"Home","title":"Home","text":"f(x)=sin(x)\na=0\nb=pi/2\nn=4\nsimpson(f,a,b,n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Use Simpson's composite method to compute the integral of F(x,y), in an irregular region, when x is between a and b and y is between c(x) and d(x), for example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"int_0^1int_x^2xx^2 + sin(y) dydx","category":"page"},{"location":"","page":"Home","title":"Home","text":"F(x,y)=x^2 + sin(y)\na,b=0,1\nc(x)=x\nd(x)=2*x\nn,m=4,4\nsimpson2d(F,a,b,c,d,n,m)","category":"page"},{"location":"#Development-Status","page":"Home","title":"Development Status","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is currently under development and will soon add new features.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you want to participate in the maintenance or active development of the package, feel free to get in touch via an issue on GitHub or by writing an email to the developer.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All help is always welcome. You can help by improving the documentation, reporting bugs or adding new methods.","category":"page"}]
}
